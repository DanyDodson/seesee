version: '3'
services:
  demo-service:
    container_name: demo-service
    build:
      context: ./demo-service
      dockerfile: Dockerfile
    volumes:
      - /opt/demo-service/node_modules
      - ./demo-service:/opt/demo-service
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER='postgres'
      - POSTGRES_PASSWORD='postgres'
      - POSTGRES_DB='values'
      - REDIS_HOST='redis-server'
      - REDIS_PORT=6379
    networks:
      - frontend

  nginx-service:
    container_name: nginx-service
    build:
      context: ./nginx-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3050:80'
    networks:
      - frontend

  redis-worker:
    container_name: redis-worker
    build:
      context: ./redis-worker
      dockerfile: Dockerfile
    restart: on-failure
    volumes:
      - /opt/redis-worker/node_modules
      - ./redis-worker:/opt/redis-worker
    networks:
      - frontend

  web-client:
    container_name: web-client
    build:
      context: ./web-client
      dockerfile: Dockerfile
    volumes:
      - /opt/web-client/node_modules
      - ./web-client:/opt/web-client
    networks:
      - frontend

  redis-server:
    container_name: redis-server
    image: 'redis'
    restart: on-failure
    networks:
      - frontend

  postgres-server:
    container_name: postgres-server
    image: 'postgres'
    restart: on-failure
    environment:
      - POSTGRES_USER='postgres'
      - POSTGRES_PASSWORD='postgres'
      - POSTGRES_DB='values'
    networks:
      - frontend

networks:
  frontend:

volumes:
  database:
