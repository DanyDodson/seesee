version: "3.8"
services:

  # ==========================================#
  #  services/nginx                           #
  # ==========================================# 

  nginx_proxy:
    container_name: nginx_proxy
    image: nginx
    volumes:
      - nginx_conf:/etc/nginx/conf.d
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - nginx_certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      # - "443:443"
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    restart: always
  
  # ==========================================#
  #  services/nginx                           #
  # ==========================================# 
  
  docker_gen:
    container_name: docker_gen
    image: jwilder/docker-gen
    depends_on:
      - nginx_proxy
    volumes:
      - nginx_conf:/etc/nginx/conf.d
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_certs:/etc/nginx/certs:ro
      - ./services/nginx/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    command: -notify-sighup nginx_proxy -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen"
    restart: always

  # ==========================================#
  #  services/nginx                           #
  # ==========================================#

  letsencrypt:
    container_name: letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    depends_on:
      - nginx_proxy
      - docker_gen
    volumes:
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - nginx_certs:/etc/nginx/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always

  # ==========================================#
  #  gateway/web_client                       #
  # ==========================================#

  web_client:
    container_name: web_client
    build: ./gateway/client
    expose:
      - "3000"
    environment:
      # - REACT_APP_ENV=development
      # - BACKEND=api:8000
      # - HTTPS=true
      # - NODE_PATH=/usr/src/app
      # - BUILD_VERSION=1.0
      # - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      # - NODE_ENV=production
      - VIRTUAL_PORT=3000
      - VIRTUAL_HOST=see.localhost
      # - LETSENCRYPT_HOST=see.localhost
      # - LETSENCRYPT_EMAIL=dany@dany.codes
    depends_on:
      - nginx_proxy
      - docker_gen
      # - letsencrypt
      # - auth_service
      # - users_service
      # - gallery_service
    # volumes:
    #   - ./gateway/client:/usr/src/app

  # ==========================================#
  #  gateway/passport                         #
  # ==========================================#

  # auth_service:
  #   container_name: auth_service
  #   image: danydodson/auth_service
  #   build:
  #     context: .
  #     dockerfile: 'Dockerfile'
  #   env_file: ./gateway/passport/.env
  #   environment:
  #     - MONGO_HOSTNAME=auth_data
  #     - MONGO_USERNAME=$MONGO_USERNAME
  #     - MONGO_PASSWORD=$MONGO_PASSWORD
  #     - MONGO_DB=$MONGO_AUTH_DB
  #   volumes:
  #     - /usr/src/app/node_modules
  #     - ./gateway/passport:/usr/src/app
  #   ports:
  #     - '80:5000'
  #   depends_on:
  #     - auth_data
  #   command: ./wait-for.sh auth_data:27017 -- /home/node/app/node_modules/.bin/nodemon src/index.js

  # ==========================================#
  #  gateway/passport                         #
  # ==========================================#

  auth_data:
    container_name: auth_data
    image: mongo
    ports:
      - '27018:27018'
    env_file: ./gateway/passport/.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    volumes:
      - auth_db_vol:/data/db
    restart: unless-stopped
  
  # ==========================================#
  #  services/users/api                       #
  # ==========================================#

  # users_service:
  #   container_name: users_service
  #   build: ./services/users/api
  #   env_file: ./services/users/api/.env
  #   environment:
  #     - MONGO_HOSTNAME=users_data
  #     - MONGO_USERNAME=$MONGO_USERNAME
  #     - MONGO_PASSWORD=$MONGO_PASSWORD
  #     - MONGO_DB=$MONGO_USERS_DB
  #   volumes: 
  #     - /usr/src/app/node_modules
  #     - ./services/users/api:/usr/src/app
  #   ports:
  #     - 7000:7000
  #   logging:
  #     options:
  #       max-size: "4m"
  #       max-file: "10"
  #   depends_on:
  #     - users_data
  #   restart: unless-stopped

  # ==========================================#
  # services/users/db                         #
  # ==========================================#

  users_data:
    container_name: users_data
    image: mongo
    ports:
      - 27107:27107
    env_file: ./services/users/api/.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    volumes:
      - users_db_vol:/data/db
    restart: unless-stopped

  # ==========================================#
  #  services/gallery/api                     #
  # ==========================================#

  # gallery_service:
  #   container_name: gallery_service
  #   build: ./services/gallery/api
  #   env_file: ./services/gallery/api/.env
  #   volumes:
  #     - /usr/src/app/node_modules
  #     - ./services/users/api:/usr/src/app
  #   environment:
  #     - MONGO_HOSTNAME=gallery_data
  #     - MONGO_USERNAME=$MONGO_USERNAME
  #     - MONGO_PASSWORD=$MONGO_PASSWORD
  #     - MONGO_DB=$MONGO_GALLERY_DB
  #   ports:
  #     - 7000:7000
  #   logging:
  #     options:
  #       max-size: "4m"
  #       max-file: "10"
  #   depends_on:
  #     - gallery_data
  #   restart: unless-stopped

  # ==========================================#
  # services/gallery/db                       #
  # ==========================================#

  gallery_data:
    container_name: gallery_data
    image: mongo
    ports:
      - 27107:27107
    env_file: ./services/gallery/api/.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    volumes:
      - gallery_db_vol:/data/db
    restart: unless-stopped

  # ==========================================#
  # subscribers/rabbitmq                      #
  # ==========================================#

  # rabbitmq:
  #   container_name: rabbitmq
  #   image: rabbitmq:3-management-alpine
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   env_file: ./subscribers/rabbitmq/.env
  #   environment:
  #     RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
  #   volumes:
  #     - ./subscribers/rabbitmq/etc/:/etc/rabbitmq/
  #     - ./subscribers/rabbitmq/data/:/var/lib/rabbitmq/
  #     - ./subscribers/rabbitmq/logs/:/var/log/rabbitmq/
      
  # ==========================================#
  #  services/mongo_express                   #
  # ==========================================#

  # mongo_express:
  #   image: mongo-express
  #   container_name: mongo_express
  #   ports:
  #     - "8081:8081"
  #   volumes:
  #     - ./.docker/mongo-express/docker-entrypoint.sh:/docker-entrypoint.sh
  #   env_file: ./services/users/api/.env
  #   environment:
  #     ME_CONFIG_MONGODB_SERVER: mongodb
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  #     ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
  #     ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
    # depends_on:
      # - auth_service
      # - users_service
      # - gallery_service

  # ==========================================#
  #  services/grafana                         #
  # ==========================================#

  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana
  #   expose:
  #     - "3000"
  #   environment:
  #     - VIRTUAL_PORT=3000
  #     - VIRTUAL_HOST=graf.localhost
  #     - LETSENCRYPT_HOST=graf.localhost
  #     - LETSENCRYPT_EMAIL=dany@dany.codes
  #   restart: always
  
  # ==========================================#
  #  utilities/proxy_tunnel                   #
  # ==========================================#

  # proxy_tunnel:
  #   container_name: proxy_tunnel
  #   image: danydodson/seesee_proxy_tunnel
  #   ports:
  #     - "2222:22"
  #   expose:
  #     - "2222"
  #   environment:
  #     - VIRTUAL_HOST=dev.seesee.space
  #     - LETSENCRYPT_HOST=dev.seesee.space

  # ==========================================#
  #  global volumes                           #
  # ==========================================#

volumes:
  nginx_conf:
  nginx_vhost:
  nginx_html:
  nginx_certs:
  # auth_db_vol:
  # users_db_vol:
  # gallery_db_vol:
  
  # ==========================================#
  #  global networks                          #
  # ==========================================#
  
networks:
  default:
    external:
      name: services_network