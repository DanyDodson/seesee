
# http://www.seesee.space/user/me

location /user/me {
  proxy_http_version 1.1;
  access_by_lua_file lua/verify.lua;
  proxy_pass http://users/api/v1/users/me;
  proxy_set_header Connection "";
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_set_header Host $http_host;
}

# http://www.seesee.space/user/signup

location /user/signup {
  proxy_http_version 1.1;
  access_by_lua_file lua/sign.lua;
  proxy_pass http://users/api/v1/users/signup;
  proxy_set_header Connection "";
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_set_header Host $http_host;
}

# http://www.seesee.space/user/signin

location /user/signin {
  proxy_http_version 1.1;
  proxy_pass http://users/api/v1/users/signin;
  access_by_lua_file lua/sign.lua;
  proxy_set_header Connection "";
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_set_header Host $http_host;
}

location /user/lua/sign {
  access_by_lua_file lua/sign.lua;
}
# location /user/validate {
#   default_type application/json;
#   # Checking blacklist
#   # Checking whitelist
#   # Parse JWT, check iss, check lifetime
#   # Send to auth_center, check the user
#   # Give the answer
#   content_by_lua_block {
#     ngx.say("pong");
#   }
# }

# location /user/refresh-token {
#   default_type application/json;
#   # Get refresh_token in array
#   # View - which JWT it is associated with
#   # Compare them
#   # Check JWT in blacklist
#   # Issue a new JWT
#   # Add old to blacklist
#   content_by_lua_block {
#     ngx.say("pong");
#   }
# }

# location /user/login {
#   default_type application/json;
#   # Getting user data for authorization
#   # Send request to / authentication
#   # Receiving payload
#   # Create JWT
#   # Put JWT in whitelist
#   # Return JWT and refresh_token
#   content_by_lua_block {
#     ngx.say("pong");
#   }
# }

# location /user/logout {
#   default_type application/json;
#   # Add JWT to blacklist
#   # Return the result
#   content_by_lua_block {
#     ngx.say("pong");
#   }
# }

# location ~ ^/user/ {
#   include proxy_params;
#   rewrite /auth/(.*) /$1  break;
#   proxy_redirect off;
#   proxy_pass http://users/api/v1/user/;
# }

# location / {
  # set_by_lua $WEB_BACKEND 'return os.getenv("WEB_BACKEND")';
  # content_by_lua_block {
  #     ngx.say(require("nginx-auth").check_auth())
  # }

  # default_type application/json;
  # include proxy_params;
  # proxy_pass $WEB_BACKEND;
# }

