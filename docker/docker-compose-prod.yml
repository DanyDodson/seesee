version: '3.8'
services:

  # ==========================================#
  #  gateway/client                           #
  # ==========================================#

  gateway_client:
    container_name: gateway_client
    build:
      context: ./gateway/client/
      dockerfile: Dockerfile
    image: gateway_client
    restart: unless-stopped
    depends_on:
      - users_service
      - listings_service
    networks:
      - app_network

  # ==========================================#
  #  services/sample                          #
  # ==========================================#

  # sample_service:
  #   container_name: sample_service
  #   build:
  #     context: ./services/sample/
  #     dockerfile: Dockerfile
  #   image: sample_service
  #   restart: unless-stopped
  #   networks:
  #     - app_network

  # ==========================================#
  #  services/users                           #
  # ==========================================#

  users_service:
    container_name: users_service
    build:
      context: ./services/users/
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DB_URI=mysql://root:password@users_service_db/db?charset=UTF8
    depends_on:
      - users_service_db
    networks:
      - app_network

  # ==========================================#
  #  services/users:data                      #
  # ==========================================#

  users_service_db:
    container_name: users_service_db
    image: mysql:5.7.20
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=db
    ports:
      - "7201:3306"
    networks:
      - app_network

  # ==========================================#
  #  services/listings                        #
  # ==========================================#

  listings_service:
    container_name: listings_service
    build:
      context: ./services/listings/
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DB_URI=mysql://root:password@listings_service_db/db?charset=UTF8
    depends_on:
      - listings_service_db
    networks:
      - app_network

  # ==========================================#
  #  services/listings:data                   #
  # ==========================================#

  listings_service_db:
    container_name: listings_service_db
    image: mysql:5.7.20
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=db
    ports:
      - "7200:3306"
    networks:
      - app_network

  # ==========================================#
  #  nginx_proxy                              #
  # ==========================================#
  
  nginx_server:
    image: nginx:mainline-alpine
    container_name: nginx_server
    restart: unless-stopped
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      # - web_root:/var/www/html
      - ./services/nginx/conf.d:/etc/nginx/conf.d
      # - certbot_etc:/etc/letsencrypt
      # - certbot_var:/var/lib/letsencrypt
      # - dhparam:/etc/ssl/certs
    depends_on:
      # - sample_service
      - users_service
      - listings_service
    networks:
      - app_network

  # ==========================================#
  #  services/nginx:proxy                     #
  # ==========================================# 

  nginx_proxy:
    container_name: nginx_proxy
    image: nginx
    restart: always
    volumes:
      - nginx_conf_vol:/etc/nginx/conf.d
      - nginx_vhost_vol:/etc/nginx/vhost.d
      - nginx_html_vol:/usr/share/nginx/html
      - nginx_certs_vol:/etc/nginx/certs:ro
    ports:
      - 80:80
      - 443:443
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
  
  # ==========================================#
  #  services/nginx:docker-gen                #
  # ==========================================# 
  
  nginx_docker_gen:
    container_name: nginx_docker_gen
    image: jwilder/docker-gen
    restart: always
    volumes:
      - nginx_conf_vol:/etc/nginx/conf.d
      - nginx_vhost_vol:/etc/nginx/vhost.d
      - nginx_certs_vol:/etc/nginx/certs:ro
      - ./services/nginx/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    command: -notify-sighup nginx_proxy -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen
    depends_on:
      - nginx_proxy

  # ==========================================#
  #  services/nginx:letsencrypt               #
  # ==========================================#

  nginx_letsencrypt:
    container_name: nginx_letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    volumes:
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - nginx_certs:/etc/nginx/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - nginx_proxy
      - nginx_docker_gen

  # ==========================================#
  #  certbot                                  #
  # ==========================================#

  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - certbot_etc:/etc/letsencrypt
  #     - certbot_var:/var/lib/letsencrypt
  #     - web_root:/var/www/html
  #   depends_on:
  #     - nginx_server
  #   command: certonly --webroot --webroot-path=/var/www/html --email dany@dany.codes --agree-tos --no-eff-email --staging -d seesee.space  -d www.seesee.space
    # command: certonly --webroot --webroot-path=/var/www/html --email dany@dany.codes --agree-tos --no-eff-email --force-renewal -d seesee.space  -d www.seesee.space

  # ==========================================#
  #  services/tunnel                          #
  # ==========================================#

  # proxy_tunnel:
  #   container_name: proxy_tunnel
  #   image: danydodson/seesee_proxy_tunnel
  #   ports:
  #     - '2222:22'
  #   expose:
  #     - '2222'
  #   environment:
  #     - VIRTUAL_HOST=dev.seesee.space
  #     - LETSENCRYPT_HOST=dev.seesee.space
      
# ==========================================#
#  global volumes                           #
# ==========================================#

# volumes:
  
  # certbot_etc:
  # certbot_var:

  # web_root:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: /home/ubuntu/seesee/services/sample/views/
  #     o: bind

  # dhparam:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: /home/ubuntu/seesee/services/nginx/certs
  #     o: bind
  
# ==========================================#
#  global networks                          #
# ==========================================#
  
networks:
  app_network:
    driver: bridge