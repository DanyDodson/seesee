
# This server block will allow us to start the Nginx container as a reverse proxy, 
# which will pass requests to our Node application container. It will also allow us 
# to use Certbotâ€™s webroot plugin to obtain certificates for our domain. This plugin 
# depends on the HTTP-01 validation method, which uses an HTTP request to prove that 
# Certbot can access resources from a server that responds to a given domain name.

server {

  listen 80;
  listen [::]:80;
  server_name seesee.space www.seesee.space;

  location ~ /.well-known/acme-challenge {
    allow all;
    root /var/www/html;
  }

  location / {
    rewrite ^ https://$host$request_uri? permanent;
  }

}

server {

  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  
  server_name seesee.space www.seesee.space;

  server_tokens off;

  ssl_certificate /etc/letsencrypt/live/seesee.space/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/seesee.space/privkey.pem;

  ssl_buffer_size 8k;

  ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

  ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
  ssl_prefer_server_ciphers on;

  ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

  ssl_ecdh_curve secp384r1;
  ssl_session_tickets off;

  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.8.8;

  location / {
    try_files $uri @node_sample;
  }

  location @node_sample {
    proxy_pass http://node_sample:8080;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    # enable strict transport security only if you understand the implications
  }

  # location /listings {
  #   try_files $uri @listings_service;
  # }

  # location @listings_service {
  #   proxy_pass http://listings_service:7100;
  #   add_header X-Frame-Options "SAMEORIGIN" always;
  #   add_header X-XSS-Protection "1; mode=block" always;
  #   add_header X-Content-Type-Options "nosniff" always;
  #   add_header Referrer-Policy "no-referrer-when-downgrade" always;
  #   add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
  #   # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  #   # enable strict transport security only if you understand the implications
  # }

  # location /users {
  #   try_files $uri @users_service;
  # }

  # location @users_service {
  #   proxy_pass http://users_service:7101;
  #   add_header X-Frame-Options "SAMEORIGIN" always;
  #   add_header X-XSS-Protection "1; mode=block" always;
  #   add_header X-Content-Type-Options "nosniff" always;
  #   add_header Referrer-Policy "no-referrer-when-downgrade" always;
  #   add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
  #   # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  #   # enable strict transport security only if you understand the implications
  # }

  root /var/www/html;
  index index.html index.htm index.nginx-debian.html;

}