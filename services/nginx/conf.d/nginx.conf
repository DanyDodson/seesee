
# # Block alihack
# # deny 23.27.103.106/32;

# upstream gateway_client {
#   # least_conn;
#   server gateway_client:7102;
# }

# upstream users_service {
#   # least_conn;
#   server users_service:7101;
# }

# upstream listings_service {
#   # least_conn;
#   server listings_service:7100;
# }

# server {

#   listen 80 default_server;
#   listen [::]:80 default_server;

#   # listen 80;
#   # listen [::]:80;

#   # if ($request_method = 'OPTIONS') {
#   #   return 200;
#   # }

#   root /var/www/html;
#   index index.html;
#   # index index.html index.htm index.nginx-debian.html;

#   # server_name seesee.space www.seesee.space;

#   # location / {
#   #   proxy_pass http://sample_service:7102;
#   # }

#   # To allow POST on static pages
#   # error_page 405 =200 $uri;

#   location / {
#     proxy_pass http://gateway_client;
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;
#     break;
#   }

#   location ~* \.(eot|otf|ttf|woff|woff2)$ {
#     add_header Access-Control-Allow-Origin *;
#   }

#   location ~ /users/(?<url>.*) {
#     proxy_pass http://users_service;
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;
#   }

#   location ~ /listings/(?<url>.*) {
#     proxy_pass http://listings_service;
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;
#   }

#   # location ~ /.well-known/acme-challenge {
#   #   allow all;
#   #   root /var/www/html;
#   # }

# }


# # This server block will allow us to start the Nginx container as a reverse proxy, 
# # which will pass requests to our Node application container. It will also allow us 
# # to use Certbotâ€™s webroot plugin to obtain certificates for our domain. This plugin 
# # depends on the HTTP-01 validation method, which uses an HTTP request to prove that 
# # Certbot can access resources from a server that responds to a given domain name.

# # server {

# #   listen 80;
# #   listen [::]:80;
# #   server_name seesee.space www.seesee.space;

# #   location ~ /.well-known/acme-challenge {
# #     allow all;
# #     root /var/www/html;
# #   }

# #   location / {
# #     rewrite ^ https://$host$request_uri? permanent;
# #   }

# # }

# # server {

# #   listen 443 ssl http2;
# #   listen [::]:443 ssl http2;
  
# #   server_name seesee.space www.seesee.space;

# #   server_tokens off;

# #   ssl_certificate /etc/letsencrypt/live/seesee.space/fullchain.pem;
# #   ssl_certificate_key /etc/letsencrypt/live/seesee.space/privkey.pem;

# #   ssl_buffer_size 8k;

# #   ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

# #   ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
# #   ssl_prefer_server_ciphers on;

# #   ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

# #   ssl_ecdh_curve secp384r1;
# #   ssl_session_tickets off;

# #   ssl_stapling on;
# #   ssl_stapling_verify on;
# #   resolver 8.8.8.8;

# #   location / {
# #     try_files $uri @sample_service;
# #   }

# #   location @sample_service {
# #     proxy_pass http://sample_service:7102;
# #     add_header X-Frame-Options "SAMEORIGIN" always;
# #     add_header X-XSS-Protection "1; mode=block" always;
# #     add_header X-Content-Type-Options "nosniff" always;
# #     add_header Referrer-Policy "no-referrer-when-downgrade" always;
# #     add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
# #     # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
# #     # enable strict transport security only if you understand the implications
# #   }

# #   root /var/www/html;
# #   index index.html index.htm index.nginx-debian.html;

# # }